{
  "@context": {
    "biotools": "https://bio.tools/ontology/",
    "bsc": "http://bioschemas.org/",
    "edam": "http://edamontology.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://doi.org/10.7287/PEERJ.PREPRINTS.1516V2",
      "@type": "sc:CreativeWork"
    },
    {
      "@id": "https://bio.tools/FSCs",
      "@type": "sc:SoftwareApplication",
      "sc:applicationSubCategory": [
        {
          "@id": "edam:topic_3678"
        },
        {
          "@id": "edam:topic_3372"
        },
        {
          "@id": "edam:topic_3341"
        }
      ],
      "sc:citation": {
        "@id": "https://doi.org/10.7287/PEERJ.PREPRINTS.1516V2"
      },
      "sc:description": "How are functionally similar code clones syntactically different? An empirical study and a benchmark.\n\nBackground Today, redundancy in source code, so-called “clones”, caused by copy&paste can be found reliably using clone detection tools. Redundancy can arise also independently, however, caused not by copy&paste. At present, it is not clear how only functionally similar clones (FSC) differ from clones created by copy&paste. Our aim is to understand and categorise the syntactic differences in FSCs that distinguish them from copy&paste clones in a way that helps clone detection research. Methods. We conducted an experiment using known functionally similar programs in Java and C from coding contests. We analysed syntactic similarity with traditional detection tools and explored whether concolic clone detection can go beyond syntax.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'copy and paste', 'concolic', 'FSC', 'syntactic'",
      "sc:name": "FSCs",
      "sc:url": "https://doi.org/10.7287/PEERJ.PREPRINTS.1516V2"
    }
  ]
}